/**
\defgroup options Further options for FSVS.
\ingroup userdoc

List of settings that modify FSVS' behaviour.

FSVS understands some other options, that modify its behaviour.


\section o__list Short list of options

FSVS currently knows:<UL>
<LI>\c author - \ref o_author
<LI>\c colordiff - \ref o_colordiff
<LI>\c commit_to - \ref o_commit_to
<LI>\c conflict - \ref o_conflict
<LI>\c conf - \ref o_conf.
<LI>\c copyfrom_exp - \ref o_copyfrom_exp
<LI>\c debug_output - \ref o_debug_output
<LI>\c delay - \ref o_delay
<LI>\c diff_prg, \c diff_opt, \c diff_extra - \ref o_diff
<LI>\c dir_sort - \ref o_dir_sort
<LI>\c empty_commit - \ref o_empty_commit
<LI>\c filter - \ref o_filter, but see \ref glob_opt_filter "-f".
<LI>\c limit - \ref o_logmax
<LI>\c log_output - \ref o_logoutput
<LI>\c merge_prg, \c merge_opt - \ref o_merge
<LI>\c path - \ref o_opt_path
<LI>\c softroot - \ref o_softroot
<LI>\c stat_color - \ref o_status_color
<LI>\c stop_on_change - \ref o_stop_change
<LI>\c warning - \ref o_warnings, but see \ref glob_opt_warnings "-W".  
<LI>\c waa - \ref o_waa.
</UL>


\section o__prio Priorities for option setting

The priorities are<ul>
<li>Command line \e (highest)
<li>Environment variables. These are named as <tt>FSVS_</tt><i>{upper-case 
option name}</i>.
<li><tt>$HOME/.fsvs/wc-dir/config</tt>
<li><tt>$FSVS_CONF/wc-dir/config</tt>
<li><tt>$HOME/.fsvs/config</tt>
<li><tt>$FSVS_CONF/config</tt>
<li>Default value, compiled in \e (lowest)
</ul>

\note The \c $HOME-dependent configuration files are not implemented 
currently. Volunteers?

Furthermore there are "intelligent" run-time dependent settings, like 
turning off colour output when the output is redirected. Their
priority is just below the command line - so they can always be 
overridden if necessary.


\section o__examples Examples

Using the commandline:
\code
	 fsvs -o path=environment
	 fsvs -opath=environment
\endcode
Using environment variables:
\code
	 FSVS_PATH=absolute fsvs st
\endcode
A configuration file:
\code
	 # FSVS configuration file
	 path=wcroot
\endcode


\section o_opt_path Displaying paths

You can specify how paths printed by FSVS should look like; this is used 
for the entry status output of the various actions, and for the diff header 
lines. 

There are several possible settings, of which one can be chosen via the \c 
path option.

- \anchor pd_wcroot \c wcroot \n
	This is the old, traditional FSVS setting, where all paths are printed 
	relative to the working copy root.

- \anchor pd_parm \c parameter \n
	With this setting FSVS works like most other programs - it uses the first 
	best-matching parameter given by the user, and appends the rest of the 
	path.\n
	This is the new default.
	\note Internally FSVS still first parses all arguments, and then does a 
	single run through the entries. So if some entry matches more than one 
	parameter, it is printed using the first. \n

- \anchor pd_absolute \c absolute \n
	All paths are printed in absolute form. This is useful if you want to 
	paste them into other consoles without worrying whether the current 
	directory matches.

The next two are nearly identical to \c absolute, but the beginning of 
paths are substituted by environment variables. This makes sense if you 
want the advantage of full paths, but have some of them abbreviated.
- \anchor pd_env \c environment \n
	Match variables to directories after reading the known entries, and use 
	this cached information. This is faster, but might miss the best case if 
	new entries are found (which would not be checked against possible longer 
	hits). \n
	Furthermore, as this works via associating environment variables to 
	entries, the environment variables must at least match the working copy 
	base - shorter paths won't be substituted.
- \c full-environment \n
	Check for matches just before printing the path. \n
	This is slower, but find the best fit.
\note The string of the environment variables must match a directory name; 
the filename is always printed literally, and partial string matches are 
not allowed. Feedback wanted.
\note Only environment variables whose names start with \c WC are used for 
substitution, to avoid using variables like \c $PWD, \c $OLDPWD, \c $HOME 
and similar which might differ between sessions.
Maybe the allowed prefixes for the environment variables should be settable 
in the configuration. Opinions to the users mailing list, please.

Example, with \c / as working copy base:
\code
$ cd /etc

$ fsvs -o path=wcroot st
.mC.     1001  ./etc/X11/xorg.conf

$ fsvs -o path=absolute st
.mC.     1001  /etc/X11/xorg.conf

$ fsvs -o path=parameters st
.mC.     1001  X11/xorg.conf
$ fsvs -o path=parameters st .
.mC.     1001  ./X11/xorg.conf
$ fsvs -o path=parameters st /
.mC.     1001  /etc/X11/xorg.conf
$ fsvs -o path=parameters st X11
.mC.     1001  X11/xorg.conf
$ fsvs -o path=parameters st ../dev/..
.mC.     1001  ../dev/../etc/X11/xorg.conf
$ fsvs -o path=parameters st X11 ../etc
.mC.     1001  X11/xorg.conf
$ fsvs -o path=parameters st ../etc X11
.mC.     1001  ../etc/X11/xorg.conf

$ fsvs -o path=environ st
.mC.     1001  ./etc/X11/xorg.conf
$ WCBAR=/etc fsvs -o path=wcroot st
.mC.     1001  $WCBAR/X11/xorg.conf
$ WCBAR=/etc fsvs -o path=wcroot st /
.mC.     1001  $WCBAR/X11/xorg.conf
$ WCBAR=/e fsvs -o path=wcroot st
.mC.     1001  /etc/X11/xorg.conf
$ WCBAR=/etc WCFOO=/etc/X11 fsvs -o path=wcroot st
.mC.     1001  $WCFOO/xorg.conf

$ touch /etc/X11/xinit/xinitrc
$ fsvs -o path=parameters st
.mC.     1001  X11/xorg.conf
.m.?     1001  X11/xinit/xinitrc
$ fsvs -o path=parameters st X11 /etc/X11/xinit
.mC.     1001  X11/xorg.conf
.m.?     1001  /etc/X11/xinit/xinitrc
\endcode

\note At least for the command line options the strings can be abbreviated, 
as long as they're still identifiable.
Please use the full strings in the configuration file, to avoid having 
problems in future versions when more options are available.



\section o_diff Options relating to the "diff" action

The diff is not done internally in FSVS, but some other program is called, 
to get the highest flexibility.

There are several option values:
- <tt>diff_prg</tt>: The executable name, default <tt>"diff"</tt>.
- <tt>diff_opt</tt>: The default options, default <tt>"-pu"</tt>.
- <tt>diff_extra</tt>: Extra options, no default.

The call is done as
\code
	$diff_prg $diff_opt $file1 --label "$label1" $file2 --label "$label2" diff_extra
\endcode

\note In \c diff_opt you should use only use command line flags without 
parameters; in \c diff_extra you can encode a single flag with parameter 
(like <tt>"-U5"</tt>).
If you need more flexibility, write a shell script and pass its name as \c 
diff_prg.


\section o_colordiff Using colordiff

If you have \c colordiff installed on your system, you might be interested 
in the \c colordiff option.

It can take on of these values:
- \c no, \c off or \c false: Don't use \c colordiff.
- "", ie. empty (default value): Try to use \c colordiff as executable, but 
	don't throw an error if it can't be started; just pipe the data as-is to 
	\c STDOUT.
- anything else: Pipe the output of the \c diff program (see \ref o_diff) 
	to the given executable.

Please note that if \c STDOUT is not a tty (eg. is redirected into a file), 
this option must be given on the command line to take effect.


\section o_filter Filtering entries

Please see the command line parameter for \ref glob_opt_filter "-f", which 
is identical.

\code
	fsvs -o filter=mtime
\endcode


\section o_warnings Setting warning behaviour

Please see the command line parameter \ref glob_opt_warnings "-W", which is 
identical.

\code
	fsvs -o warning=diff-status=ignore
\endcode


\section o_softroot Using an alternate root directory

This is a path that is prepended to \c $FSVS_WAA and \c $FSVS_CONF 
(or their default values, see \ref waa_files), if they do not already 
start with it, and it is cut off for the directory-name MD5 calculation.

When is that needed? Imagine that you've booted from some Live-CD like 
Knoppix; if you want to setup or restore a non-working system, you'd have 
to transfer all files needed by the \c fsvs binary to it, and then start in 
some kind of \c chroot environment.

With this parameter you can tell \c fsvs that it should load its libraries 
from the current filesystem, but use the given path as root directory for 
its administrative data.

This is used for recovery; see the example in \ref howto_backup_recovery.

So how does this work?
- The internal data paths derived from \c $FSVS_WAA and \c $FSVS_CONF use 
	the value given for \c softroot as a base directory, if they do not 
	already start with it.
	(If that creates a conflict for you, eg. in that you want to use \c /var 
	as the \c softroot, and your \c $FSVS_WAA should be \c /var/fsvs, you can 
	make the string comparison fail by using <tt>/./var</tt> for either path.)
- When a directory name for \c $FSVS_CONF or \c $FSVS_WAA is derived from 
	some file path, the part matching \c softroot is cut off, so that the 
	generated names match the situation after rebooting.

Previously you'd have to \ref export your data back to the filesystem and 
call \ref urls <tt>"fsvs urls"</tt> and \c fsvs \ref sync-repos 
"sync-repos" again, to get the WAA data back.

\note A plain \c chroot() would not work, as some needed programs (eg. 
the decoder for update, see \ref s_p_n) would not be available.

\note The easy way to understand \c softroot is: If you want to do a 
\c chroot() into the given directory (or boot with it as \c /), you'll want 
this set.


\section o_logmax "fsvs log" revision limit

There are some defaults for the number of revisions that are shown on a 
<tt>"fsvs log"</tt> command:<ul>
<li>2 revisions given (<tt>-rX:Y</tt>): \c abs(X-Y)+1, ie. all revisions in 
that range.
<li>1 revision given: exactly that one.
<li>no revisions given: from \c HEAD to 1, with a maximum of 100.
</ul>

So this command is mostly useful to get more than the default number of 
revisions on when running without revision arguments, or to get fewer.


\section o_logoutput "fsvs log" output format

You can modify aspects of the \ref log "fsvs log" output format by setting 
the \c log_output option to a combination of these flags:
- \c color: This uses color in the output, similar to \c cg-log 
	(cogito-log); the header and separator lines are highlighted.
	\note This uses ANSI escape sequences, and tries to restore the default 
	color; if you know how to do that better (and more compatible), please 
	tell the developer mailing list.
- \c indent: Additionally you can shift the log message itself a space to 
	the right, to make the borders clearer.

Furthermore the value \c normal is available; this turns off all special 
handling.

\note If you start such an option, the value is reseted; so if you specify 
\c log_output=color,indent in the global config file, and use \c 
log_output=color on the commandline, only colors are used. This is a 
difference to the \ref o_filter option, which is cumulating.


\section o_status_color Status output coloring

\c FSVS can colorize the output of the status lines; removed entries will 
be printed in red, new ones in green, and otherwise changed in blue.  
Unchanged (for \c -v) will be given in the default color.

For this you can set \c stat_color=yes; this is turned \c off per default.

As with the other colorizing options this gets turned \c off automatically 
if the output is not on a tty; on the command line you can override this, 
though.


\section o_dir_sort Directory sorting

If you'd like to have the output of \ref status sorted, you can use the 
option \c dir_sort=yes.
\c FSVS will do a run through the tree, to read the status of the entries, 
and then go through it again, but sorted by name. (See dir_enumerator().)

\note If \c fsvs aborts with an error during \ref status output, you might 
want to turn this option off again (eg. on the commandline with \c 
-odir_sort=no) to see where \c fsvs stops.


\section o_author Author

You can specify an author to be used on commit.
This option has a special behaviour; if the first character of
the value is an \c '$', the value is replaced by the environment
variable named.

Empty strings are ignored; that allows an \c /etc/fsvs/config like this:
\code
  author=unknown
  author=$LOGNAME
  author=$SUDO_USER
\endcode
where the last non-empty value is taken;
and if your \c .authorized_keys has lines like
\code
  environment="FSVS_AUTHOR=some_user" ssh-rsa ...
\endcode
that would override the config values.


\section o_commit_to Destination URL for commit

If you defined multiple URLs for your working copy, \c FSVS needs to know 
which URL to commit to.

For this you would set \c commit_to to the \b name of the URL; see this 
example:
\code
		fsvs urls N:master,P:10,http://... N:local,P:20,file:///...
		fsvs ci /etc/passwd -m "New user defined" -ocommit_to=local
\endcode


\section o_debug_output Destination for debug output

See \ref glob_opt_deb "-d".

Example:
\code
	 fsvs -o debug_output=/tmp/debug.out -d st /etc
\endcode


\section o_empty_commit Doing empty commits

In the default settings FSVS will happily create empty commits, ie.  
revisions without any changed entry. These just have a revision number, an 
author and a timestamp; this is nice if FSVS is run via CRON, and you want 
to see when FSVS gets run.

If you would like to avoid such revisions, set this option to \c no; then 
such commits will be avoided.

Example:
\code
		fsvs commit -o empty_commit=no -m "cron" /etc
\endcode


\section o_copyfrom_exp Avoiding expensive compares on \ref cpfd "copyfrom-detect"

If you've got big files that are seen as new, doing the MD5 comparison can 
be time consuming. So there's the option \c copyfrom_exp, which takes the 
usual \c yes (default) and \c no arguments.

\code
		fsvs copyfrom-detect -o copyfrom_exp=no some_directory
\endcode


\section o_delay Waiting for a time change after working copy operations

If you're using \c fsvs in automated systems, you might see that changes 
that happen in the same second as a commit are not seen with \ref status 
later; this is because the timestamp granularity of \c fsvs is 1 second.

For backward compatibility the default value is \c no (don't delay).
You can set it to any combination of<ul>
<li>\c commit,
<li>\c update,
<li>\c revert and/or
<li>\c checkout;</ul>
for \c yes all of these actions are delayed until the clock seconds change.

Example how to set that option via an environment variable:
\code
		export FSVS_DELAY=commit,revert
\endcode


\section o_stop_change Stopping status reports as soon as changes are found

If you want to use \c FSVS in scripts, you might simply want to know whether
anything was changed.

For this use the \c stop_on_change option, possibly combined with 
\ref o_filter :
\code
    fsvs -o stop_change=yes st /etc
    fsvs -o stop_change=yes -o filter=text status /etc/init.d
\endcode


\section o_conflict How to resolve conflicts on update

If you start an update, but one of the entries that was changed in the 
repository is changed locally too, you get a conflict.


There are some ways to resolve a conflict:<UL>

<LI>\c local - Just take the local entry, ignore the repository.

<LI>\c remote - Overwrite any local change with the remote version.

<LI>\c both - Keep the local modifications in the file renamed to 
<tt><i>filename</i>.mine</tt>, and save the repository version as 
<tt><i>filename</i>.r<i>XXX</i></tt>, ie.  put the revision number after 
the filename.

These files will be seen as \c New; the conflict must be solved manually, 
and the resolution made known to FSVS via \ref resolve.

\note As there's no known \e good version after this renaming, a zero byte 
file gets created. \n
Any \ref resolve "resolve" or \ref revert "revert" command would make that 
current, and the changes that are kept in <tt><i>filename</i>.mine</tt> 
would be lost! \n
You could only \ref revert to the last repository version, ie. the data of
<tt><i>filename</i>.r<i>XXX</i></tt>.


<LI>\c merge - Call the program \c merge with the common ancestor, the 
local and the remote version.

If it is a clean merge, no further work is necessary; else you'll get the 
(partly) merged file, and the two other versions just like with the \c both 
variant, and have to tell FSVS that the conflict is resolved by \ref 
resolve.
</ul>

\note As in the subversion command line client \c svn the auxiliary files 
are seen as new, although that might change in the future (so that they 
automatically get ignored).


\section o_merge Options regarding the "merge" programm

Like with \ref o_diff "diff", the \c merge operation is not done internally 
in FSVS.

To have better control
- <tt>merge_prg</tt>: The executable name, default <tt>"merge"</tt>.
- <tt>merge_opt</tt>: The default options, default <tt>"-A"</tt>.

The option \c "-p" is always used:
\code
	$merge_prg $merge_opt -p $file1 $common $file2
\endcode


\section o_conf Path definitions for the config and WAA area

\anchor o_waa 

The path given here is used to store the persistent configuration data 
needed by FSVS; please see \ref waa_files and \ref o__prio for more 
details, and the \ref o_softroot parameter as well as the \ref 
howto_backup_recovery for further discussion.

\code
	FSVS_CONF=/home/user/.fsvs-conf fsvs -o waa=/home/user/.fsvs-waa st
\endcode

\note Please note that these paths can be given \b only as environment 
variables (\c $FSVS_CONF resp. \c $FSVS_WAA) or as command line parameter; 
settings in config files are ignored.

 */
// vi: filetype=doxygen spell spelllang=en_gb formatoptions+=ta : 
