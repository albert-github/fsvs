#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.60)
AC_INIT(fsvs, 
	[esyscmd(make --quiet --no-print-directory -f Makefile.in version-nnl 2>/dev/null)], 
	http://fsvs.tigris.org/)
AC_GNU_SOURCE

# if [[ "x$cache_file" == /dev/null ]]
# then
# 	cache_file=config.cache
# fi
# AC_CACHE_LOAD

AC_CONFIG_SRCDIR([src/actions.c])
AC_CONFIG_HEADERS([src/config.h])

AC_MSG_NOTICE([***  Now configuring FSVS ]AC_PACKAGE_VERSION[  ***])

# Checks for programs.
AC_PROG_CC
AC_PROG_CPP


##################################### Header files
INCDIRS="/usr/local/include /usr/include /openpkg/include "
# The subversion headers do a #include <apr_pools.h>, so the APR libraries 
# *have* to be directly specified.
# Furthermore there's apr-1/ as directory name, depending on apr version.
# Is there something like this available for subversion?
AC_ARG_WITH(aprinc,
		AC_HELP_STRING([--with-aprinc=PATH],
			[Specify an include directory for the APR headers.]),
		[
			INCDIRS="$INCDIRS $withval"
		], [
			if APR=`apr-1-config --includedir || apr-config --includedir`
			then
				INCDIRS="$INCDIRS $APR"
			fi
		])

AC_ARG_WITH(svninc,
		AC_HELP_STRING([--with-svninc=PATH],
			[Specify an include directory for the subversion headers.]),
		[
			INCDIRS="$INCDIRS $withval"
		])

AC_ARG_WITH(svninc,
		AC_HELP_STRING([--with-svninc=PATH],
			[Specify an include directory for the subversion headers.]),
		[
			INCDIRS="$INCDIRS $withval"
		])

CFLAGS="$CFLAGS -D_GNU_SOURCE=1 -D_FILE_OFFSET_BITS=64"
for dir in $INCDIRS
do
# using -I would result in the files being _non_ system include 
# directories, ie. they'd clutter the dependency files.
# That's why -idirafter is used.
	CFLAGS="$CFLAGS -idirafter $dir"
done
AC_DEFINE_UNQUOTED(CFLAGS, [$CFLAGS])
AC_SUBST(CFLAGS)
AC_MSG_NOTICE(["CFLAGS=$CFLAGS"])

##################################### Linker
LIBDIRS="/usr/local/lib /openpkg/lib"

AC_ARG_WITH(aprlib,
		AC_HELP_STRING([--with-aprlib=PATH],
			[Specify a directory containing APR libraries.]),
		[
			LIBDIRS="$LIBDIRS $withval"
		])

AC_ARG_WITH(svnlib,
		AC_HELP_STRING([--with-svnlib=PATH],
			[Specify a directory containing subversion libraries.]),
		[
			LIBDIRS="$LIBDIRS $withval"
		])

for dir in $LIBDIRS
do
	LDFLAGS="$LDFLAGS -L$dir"
done
AC_DEFINE_UNQUOTED(LDFLAGS, [$LDFLAGS])
AC_SUBST(LDFLAGS)

AC_MSG_NOTICE(["LDFLAGS=$LDFLAGS"])

##################################### Checks
# Checks for libraries.
AC_CHECK_LIB([pcre], [pcre_compile],
	[],
	[AC_MSG_FAILURE([Sorry, can't find PCRE.])])
AC_CHECK_LIB([aprutil-1], [apr_md5_init], [],
	[AC_MSG_FAILURE([Sorry, can't find APR.])])
AC_CHECK_LIB([svn_delta-1], [svn_txdelta_apply], [],
	[AC_MSG_FAILURE([Sorry, can't find subversion.])])
AC_CHECK_LIB([svn_ra-1], [svn_ra_initialize], [],
	[AC_MSG_FAILURE([Sorry, can't find subversion.])])
AC_CHECK_LIB([gdbm], [gdbm_firstkey], [],
	[AC_MSG_FAILURE([Sorry, can't find gdbm.])])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h stddef.h stdlib.h string.h sys/time.h unistd.h pcre.h ],
		[],
		[AC_MSG_FAILURE([Needed header file not found.])])

#apr_file_io.h subversion-1/svn_md5.h])
AC_HEADER_DIRENT

AC_CHECK_MEMBERS([struct stat.st_mtim])

AC_COMPILE_IFELSE(
	[AC_LANG_PROGRAM(
		[[ #include <valgrind/memcheck.h> ]], 
		[[ VALGRIND_MAKE_MEM_DEFINED(0, 2); ]] )],
		[have_valgrind=yes], [have_valgrind=no])
if test x$have_valgrind = xyes ; then
	AC_DEFINE(HAVE_VALGRIND, 1, compatible valgrind version found)
else
  AC_MSG_NOTICE([No compatible valgrind version.])
fi

AC_CHECK_HEADERS([linux/kdev_t.h])

AC_ARG_ENABLE(dev-fake,
	AC_HELP_STRING([--enable-dev-fake], 
		[Include fake definitions for MAJOR(), MINOR() and MKDEV(). Needed if none found.]),
	[AC_DEFINE([ENABLE_DEV_FAKE])
	 ENABLE_DEV_FAKE=1],
	[])
AC_SUBST(ENABLE_DEV_FAKE)


AC_ARG_ENABLE(debug,
	AC_HELP_STRING([--enable-debug], 
		[compile some extra debug checks in (valgrind, gdb) (default is no)]),
	[AC_DEFINE([ENABLE_DEBUG])
	 ENABLE_DEBUG=1],
	[])
AC_SUBST(ENABLE_DEBUG)


AC_ARG_ENABLE(gcov,
	AC_HELP_STRING([--enable-gcov], 
		[whether to compile with instrumentation for gcov (default is no) (needs --enable-debug)]),
	[AC_DEFINE([ENABLE_GCOV])
	 ENABLE_GCOV=1],
	[])
AC_DEFINE([ENABLE_GCOV])
AC_SUBST(ENABLE_GCOV)

AC_COMPILE_IFELSE(
	[AC_LANG_PROGRAM(
		[[ #include <fcntl.h> ]], 
		[[ int i=O_DIRECTORY; ]] )],
		[have_o_directory=yes], [have_o_directory=no])
if test x$have_o_directory = xyes ; then
	AC_DEFINE(HAVE_O_DIRECTORY, 1, O_DIRECTORY found)
fi
AC_SUBST(HAVE_O_DIRECTORY)


if locale -a > /dev/null 2>&1
then
	AC_DEFINE([HAVE_LOCALES],[1])
fi
AC_SUBST(HAVE_LOCALES)


AC_ARG_WITH(chroot,
	AC_HELP_STRING([--with-chroot=PATH],
		[Specify a chroot environment for the fsvs-chrooter 
		helper.]),
	[
		if test "$withval" = "yes" ; then
			AC_MSG_ERROR([--with-chroot requires an argument.])
		else
			CHROOTER_JAIL=$withval
			AC_DEFINE_UNQUOTED(CHROOTER_JAIL, "$CHROOTER_JAIL",
				[The path of a chroot jail.])
		fi
	])
AC_SUBST(CHROOTER_JAIL)


AC_ARG_ENABLE(release,
	AC_HELP_STRING([--enable-release], 
		[whether to compile without debug messages. Makes image smaller (to about half size), but makes -d and -D inoperative. (Default is no)]),
	[AC_DEFINE([ENABLE_RELEASE])
	 ENABLE_RELEASE=1],
	[])
AC_SUBST(ENABLE_RELEASE)

if [[ "$ENABLE_RELEASE$ENABLE_DEBUG" == "11" ]]
then
	AC_MSG_ERROR([[--enable-debug and --enable-release are incompatibel.
	Use one or the other.]])
fi

AC_CHECK_FUNCS([getdents64])
AC_CHECK_HEADERS([linux/types.h])
AC_CHECK_HEADERS([linux/unistd.h])
AC_CHECK_TYPES([comparison_fn_t])

AC_SYS_LARGEFILE

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_HEADER_TIME
AC_STRUCT_TM

AC_DEFINE([HAS_FASTCALL])
AC_SUBST(HAS_FASTCALL)

# Only i386 (32bit) has fastcall.
if [[ `uname -m` == i?86 ]]
then
	HAS_FASTCALL=1
fi

AC_TYPE_UINT32_T
AC_SUBST(HAVE_UINT32_T)
# See config.h for an explanation.
if [[ "$ac_cv_c_uint32_t" == "yes" ]]
then
	ac_cv_c_uint32_t=uint32_t
fi
AC_DEFINE_UNQUOTED(AC_CV_C_UINT32_T, [$ac_cv_c_uint32_t])

AC_TYPE_UINT64_T
AC_SUBST(HAVE_UINT64_T)
if [[ "$ac_cv_c_uint64_t" == "yes" ]]
then
	ac_cv_c_uint64_t=uint64_t
fi
AC_DEFINE_UNQUOTED(AC_CV_C_UINT64_T, [$ac_cv_c_uint64_t])


# Checks for library functions.
AC_FUNC_CHOWN
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([fchdir getcwd gettimeofday memmove memset mkdir munmap rmdir strchr strdup strerror strrchr strtoul strtoull alphasort dirfd])


# AC_CACHE_SAVE

AC_CONFIG_FILES([src/Makefile tests/Makefile])
AC_OUTPUT

# Cause a recompile
touch src/config.h

if [[ "$ac_cv_header_linux_kdev_t_h" == "no" ]]
then
	AC_MSG_WARN([
  * MAJOR(), MINOR() and MAKEDEV() definitions not found.
  * Fake a definition, but that could make problems for ignore patterns
  * and commits/updates of device nodes, so these will be disabled.
  * Please contact dev@fsvs.tigris.org for help, or, if you know your 
  * systems' way, to report the correct header name.
  *
  * If you *really* need to use device compares, and have *no* other way, 
  * you could try using the --enable-dev-fake option on ./configure.])
fi

# vi: ts=3 sw=3
